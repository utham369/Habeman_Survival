activity_matrix[2,]
str(activity_matrix)
class(activity_matrix[1,1])
summary(activity_matrix)
mean_m = mean(as.numeric(activity_matrix[1,]))
mean_m = mean(activity_matrix[1,])
mean_m
mean_n = mean(as.numeric(activity_matrix[2,]))
mean_n
median_m = median(activity_matrix[1 ,])
median_m
median_n = median(as.numeric(activity_matrix[2 , c(2:5)]))
median_n
range(activity_matrix['philips',])
range_philip = max(activity_matrix['philips',]) - min(activity_matrix['philips',])
range_philip
sd_philip =sqrt(sum((activity_matrix["Philips",] - mean(activity_matrix["Philips",]))^2)/ncol(activity_matrix))
sd_philip
ncol(activity_matrix)
nrow(activity_matrix)
sd_mathew <- sqrt(sum((activity_matrix["Matthews",] - mean(activity_matrix["Matthews",]))^2)/ncol(activity_matrix))
sd_mathew
barplot(activity_matrix ,ylim = c(0 , 40) , beside = T ,col = c("Red" , "Green"))
legend(x="topright" ,legend = c("Philips" , "Matthews") ,pch = 10 , col = c("Red" , "Green"))
legend(x="topright" ,legend = c("Philips" , "Matthews") ,pch = 143 , col = c("blue" , "Green"))
barplot(activity_matrix ,ylim = c(0 , 40) , beside = T ,col = c("blue" , "Green"))
legend(x="topright" ,legend = c("Philips" , "Matthews") ,pch = 9 , col = c("blue" , "Green"))
given_data <- c(8, 6, 2, 4, 6, 8, 10, 8)
data_in_table <- table(given_data)
data_in_table
names(sort(data_in_table, decreasing = T))[1]
names(sort(data_in_table, decreasing = T))[2]
names(sort(data_in_table, decreasing = T))[4]
names(sort(data_in_table, decreasing = T))[1]
#4th question
rote_scores <- c(11, 7.5, 8.5, 10, 10, 10.5, 5.5, 10, 9, 9.5, 5.25, 8, 6.5, 10.5, 8.75, 0, 6, 6, 6.75, 8.75, 0, 9.5, 7.5, 8.5, 7)
rote_mean = mean(rote_scores)
rote_mean
diff_mean = rote_scores - rote_mean
diff_mean
diff_mean_sq <- diff_mean^2
diff_mean_sq
diff_mean_sq_sum <- sum(diff_mean_sq)/length(rote_scores)
diff_mean_sq_sum
diff_mean_sq_sum
sd_rote = sqrt(sum(rote_scores) - rote_mean)^2/length(rote_scores)
sd_rote
sd_rote <- sqrt(sum((rote_scores - mean(x = rote_scores))^2)/length(x = rote_scores))
sd_rote
sd_rote = sqrt(sum((rote_scores) - rote_mean))^2/length(rote_scores)
sd_rote
sd_rote <- sqrt(sum((rote_scores - mean(x = rote_scores))^2)/length(x = rote_scores))
sd_rote
sd_rote = sqrt(sum((rote_scores) - mean(x = rote_scores))^2/length(rote_scores))
sd_rote
sd_rote = sqrt(sum((rote_scores) - mean(x = rote_scores))^2/length(X = rote_scores))
sd_rote
sd_rote <- sqrt(sum((rote_scores - mean(x = rote_scores))^2)/length(x = rote_scores))
sd_rote = sqrt(sum((rote_scores) - mean(x = rote_scores))^2/length(X = rote_scores))
sd_rote
sd_rote = sqrt(sum((rote_scores) - mean(x = rote_scores))^2/length(X = rote_scores))
sd_rote
quantile(x = rote_scores)
quantile(x = rote_scores, prob = seq(from = 0, to = 1, by = 0.1),type = 1)
quantile(x = rote_scores, prob = seq(from = 0, to = 1, by = 0.1),type = 2)
quantile(x = rote_scores, prob = seq(from = 0, to = 1, by = 0.1),type = 1)
quantile(x = rote_scores, prob = seq(from = 0, to = 1, by = 0.5),type = 1)
quantile(x = rote_scores)
quantile(x = rote_scores, prob = seq(from = 0, to = 1, by = 0.9),type = 1)
quantile(x = rote_scores, prob = c(0,0.25, 0.5, 0.75))
quantile(x = rote_scores)
hist(x = rote_scores)
boxplot(x = rote_scores)
hist(x = rote_scores)
boxplot(x = rote_scores)
boxplot(y = rote_scores)
boxplot(x = rote_scores)
sd_rote <- sqrt(sum((rote_scores - mean(x = rote_scores))^2)/length(x = rote_scores))
sd_rote
sd(rote_scores)
dimnames(activity_matrix)
dim(activity_matrix)
a = 2
x = c(5:8)
y =c(7:10)
plot(x,y)
#Basics Of R
rm(list = ls())
2+2
2+3^2
(2+2)^4
sqrt(2)
log(2)
log(5)
test = 13*9-10+35
result = test/42
#Coding convention for equal(=) in R is <-
w <- 5
t = 10
d <- w+t
num <- 1:50
num
######### BASIC(ATOMIC) DATATYPES IN R ######
#NUMERIC(temperature decimal point) , integer(discrete) , character , logical operators
a <- 10.5
b = 'utham'
c = FALSE
d = 2+1i
class(a)
class(b)
class(c)
class(d)
X # R is case-sensitive
#########
# The c() function can be used to concatenate the values and put it in a vector
x1 <- c(0.5 , 0.6) ## numeric
x2 <- c(TRUE , FALSE)  ## logical
x3 <- c(T ,F)  ## logical
x4 <- c("a" , "b" , "c") ## character
x5 <- c(1:5)
class(x1)
class(x2)
class(x3)
class(x4)
class(x5)
# Mixing Objects in vectors
y <- c(1.7 , "a") ## character
y <- c(TRUE , 2) ## numeric
y <- c(TRUE , 2 , FALSE) # numeric
y <- c("a" , TRUE) ## character
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
# Coercion results in NAs. NA values in R are NULL values
x <- c("25-35" , "twenty five" , "twenty eight", 25 , '25;35')
as.numeric(x)
as.logical(x)
###NOTE : A CHARACTER CANNOT BE CONVERTED INTO TO NUMERIC OR LOGICAL
#To create a sequence of numbers
seq(from=1 , to=5 , by=.5)
#Repeating a number
rep(1,10)
######### MATRICES ###########
#Matrix
# tabular structure, holds values of same datatype
# ALL the elements of a matrix should be of same type
m1 <- matrix(nrow =2 , ncol = 3)
m1
dim(m1)
m2 <- matrix(1:6 , nrow =2 , ncol = 3 , byrow = TRUE)
m2
# byrow is bydefault FALSE
##cbind-ing and rbind-ing
x <- 1:3
y <- 10:12
cbind(x , y)
rbind(x , y)
cmat = cbind(x , y)
cmat[1,]
cmat
cmat[3,2]
cmat[,2]
cmat[1,1]
cmat[]
cmat[0,0]
cmat[1,0]
cmat[0,1]
cmat[1,2]
#To get  2 elements in a matrix
m=rbind(x , y)
r=m[c(1,2) , c(1,3)]
m
m[,c(1,3)]
r[1,]
#*******
n=cbind(x , y)
n
n[c(1,1) , c[2,1]]
n
s1=c(1 , "alpha" , T)
s2=c(37 , F , "x")
dd = rbind(s1 ,s2)
dd
m3 <- matrix(nrow =2 , ncol = 3 , byrow = TRUE)
#m3[c(1 ,"alpha" , T) , c(37 , F ,"x")]
m3
x <- data.frame(Age = c(25,30,35,40) , working = c(T,T,F,F))
x
y =x[1]
y
x$Age
str(x)
nrow(x)
ncol(x)
names(x)
#*********matrix creation , subsets and dataframes creation ********
seq(from = 1 , to = 10 ,by = 0.5)
seq(1 , 10 ,0.5)
mean(seq(from = 1 , to = 10 ,by = 0.5))
sample()
sample(x = (1:6) , size = 10 , replace = TRUE , prob = c(.1 , 0.1 ,.01,0.39,0.2,0))
set.seed(1)
dd =sample(x = (1:6) , size = 10 , replace = TRUE , prob = c(.1 , 0.1 ,.01,0.39,0.2,0))
mean(dd)
vec = c(rep(1,10) , rep(2,20) , rep(30,30))
vec
mean(vec)
sd(vec)
nb = matrix(data = 1:6 ,nrow = 2 ,ncol = 3,byrow = TRUE ,dimnames = list(c("Alpha" , "BETA") , c("A","B","C")))
nb
nb[1,]
nb["Alpha",]
nb[2,2:3]
library(help = "datasets")
attach(mtcars)
cars_data = mtcars
rm(data)
#1_Numeric
#2_categorical
#3_numeric
#6-numeric
num_cols = cars_data[c(1,3,4,5,6)]
num_cols
num_cols2 = cars_data[,c(2:11)]
num_cols2
#num_cols2 = cars_data[,-1]  THIS IS ALSO WORKS
num_cols2 = cars_data[,c(1,7)]  # extracts only 1 and 7th column
num_cols2 = cars_data[,-c(1,7)]  # eliminates only 1 and 7th column
num_cols2
apply(num_cols,  2,  mean)  #mean of all columns in dataset
barplot(cars_data$cyl)
cars_data$cyl <- as.factor(as.character(cars_data$cyl))
str(cars_data)
plot(cars_data$cyl)
cars_data$cyl <- as.numeric(cars_data$cyl)
str(cars_data$cyl)
names(cars_data)
num_cols3 =  cars_data[1:7]
num_cols3 = num_cols3[,-2]
apply(num_cols3, 2 , mean)
num_cols2 = cars_data[,c(2:11)]
num_cols2
num_cols2 = cars_data[,c(1,7)]  # extracts only 1 and 7th column
num_cols2 = cars_data[,c(2:11)]
num_cols2
View(num_cols2)
View(num_cols2)
View(num_cols2)
View(num_cols2)
num_cols2 = cars_data[,-2]  THIS IS ALSO WORKS
num_cols2 = cars_data[,-2]  #THIS IS ALSO WORKS
num_cols2 = cars_data[,c(2:11)]
num_cols2
barplot(cars_data$cyl)
barplot(cars_data$cyl , col=("blue" , "red"))
barplot(cars_data$cyl , col=c("blue" , "red"))
barplot(cars_data$cyl , ylim = c(0,10) ,col=c("blue" , "red"))
barplot(cars_data$cyl , ylim = c(0,8) ,col=c("blue" , "red"))
cars_data$cyl <- as.factor(as.character(cars_data$cyl))
str(cars_data)
plot(cars_data$cyl)
cars_data$cyl <- as.numeric(cars_data$cyl)
str(cars_data$cyl)
names(cars_data)
barplot(cars_data$cyl , ylim = c(0,8) ,col=c("blue" , "red"))
barplot(cars_data$cyl)
cars_data$cyl <- as.factor(as.character(cars_data$cyl))
str(cars_data)
plot(cars_data$cyl)
num_cols2 = cars_data[,c(2:11)]
num_cols2 = cars_data[,c(2:11)]
barplot(cars_data$cyl)
apply(num_cols,  2,  mean)  #mean of all columns in dataset
barplot(cars_data$cyl)
num_cols2 = cars_data[,c(1,7)]  # extracts only 1 and 7th column
num_cols2 = cars_data[,-c(1,7)]  # eliminates only 1 and 7th column
num_cols2
apply(num_cols,  2,  mean)  #mean of all columns in dataset
barplot(cars_data$cyl)
num_cols = cars_data[c(1,3,4,5,6)]
num_cols
num_cols2 = cars_data[,c(2:11)]
num_cols2
num_cols2 = cars_data[,c(1,7)]  # extracts only 1 and 7th column
num_cols2 = cars_data[,-c(1,7)]  # eliminates only 1 and 7th column
num_cols2
apply(num_cols,  2,  mean)  #mean of all columns in dataset
barplot(cars_data$cyl)
cars_data$cyl <- as.factor(as.character(cars_data$cyl))
hist(x = rote_scores)
rm(list = ls(all=TRUE))
## Lab questions and answers:
#### 1.	Two people work in a factory making parts for cars. The matrix shows how many complete parts they make in one week.
#         - (a) Find the mean, median and range for Philip and Matthews.
#         - (b) Who is more consistent?
factory_work <- matrix(data = c(15, 21, 20, 20, 20, 30, 25, 12, 35, 0),
nrow = 2, ncol = 5, byrow = TRUE)
rownames(factory_work) <- c('Philip','Mathew')
colnames(factory_work) <- c('Mon','Tue','Wed','Thu','Fri')
factory_work
# (a) Find the mean, median and range for Philip and Matthews
mean_philip <- mean(factory_work["Philip",])
mean_philip
mean_mathew <- mean(factory_work["Mathew",])
mean_mathew
median_philip <- median(factory_work["Philip",])
median_philip
median_mathew <- median(factory_work["Mathew",])
median_mathew
range(factory_work["Philip",])
range_philip <- max(factory_work["Philip",]) - min(factory_work["Philip",])
range_philip
range_mathew <- max(factory_work["Mathew",]) - min(factory_work["Mathew",])
range_mathew
# (b) Who is more consistent?
sd_philip <- sqrt(sum((factory_work["Philip",] - mean(factory_work["Philip",]))^2)/ncol(factory_work))
sd_philip
sd_mathew <- sqrt(sum((factory_work["Mathew",] - mean(factory_work["Mathew",]))^2)/ncol(factory_work))
sd_mathew
# So, who is more consistent?
################ EXTRA : VISUALISATION FUNCTIONS ########################################
barplot(factory_work, ylim = c(0,40), beside = T, col = c("blue", "red"))
legend(x = "topright", legend = c("Philip","Mathew"), pch = 15, col = c("blue", "red"))
#########################################################################################
#### 2.	Following are Kohli's scores in 4 matches played between India and Australia, match 5 being the latest one played in a five match series.
#   Matches	| Score
#   --------|-------
#   1	      |   65
#   2	      |   72
#   3	      |   58
#   4	      |   77
#  - (a) What are his median and mean scores for the first four matches played?
#  - (b) If he scores 70 in his fifth match, does his series mean score increase or decrease w.r.t. score obtained for first four matches. Find his new mean score.
#  - (c) Which has increased most, his mean score or his median score (w.r.t first five matches)?
kohli_scores <- c(65, 72, 58, 77)
kohli_scores
old_median <- median(kohli_scores)
old_median
old_mean <- mean(kohli_scores)
old_mean
new_kohli_scores <- c(kohli_scores, 70)
new_kohli_scores
new_median <- median(new_kohli_scores)
new_median
new_mean <- mean(new_kohli_scores)
new_mean
#####################################################################################
## 3.	Find the mode for 8,6,2,4,6,8,10,8
given_data <- c(8, 6, 2, 4, 6, 8, 10, 8)
data_in_table <- table(given_data)
data_in_table
names(sort(data_in_table, decreasing = T))[1]
####################################################################################
####  4.	Analyze the performance of your class in the first ROTe taken at INSOFE
#         - (a) How is the spread of the scores?
#         - (b) Draw a histogram to visualize the data distribution.
#         - (c) Find the 25th percentile, 50th percentile and 75th percentile for this data.
#         - (d) Find outliers, if any. Do a boxplot to visualize the same.
# Scores: 11, 7.5, 8.5, 10, 10, 10.5, 5.5, 10, 9, 9.5, 5.25, 8, 6.5, 10.5, 8.75, 0, 6, 6, 6.75, 8.75, 0, 9.5, 7.5, 8.5, 7
# (a) How is the spread of the scores?
rote_scores <- c(11, 7.5, 8.5, 10, 10, 10.5, 5.5, 10, 9, 9.5, 5.25, 8, 6.5, 10.5, 8.75, 0, 6, 6, 6.75, 8.75, 0, 9.5, 7.5, 8.5, 7)
rote_mean <- mean(rote_scores)
rote_mean
diff_mean <- rote_scores - rote_mean
diff_mean
diff_mean_sq <- diff_mean^2
diff_mean_sq
diff_mean_sq_sum <- sum(diff_mean_sq)/length(rote_scores)
diff_mean_sq_sum
sd_rote <- sqrt(diff_mean_sq_sum)
sd_rote
range <- max(rote_scores) - min(rote_scores) #Range
range
sd_rote <- sqrt(sum((rote_scores - mean(x = rote_scores))^2)/length(x = rote_scores))
quantile(x = rote_scores)
quantile(x = rote_scores, prob = seq(from = 0, to = 1, by = 0.9),type = 1)
### (b) Draw a histogram to visualize the data distribution.
hist(x = rote_scores)
### (c) Find the 25th percentile, 50th percentile and 75 percentile for this data.
quantile(x = rote_scores, probs  = c(0,0.25, 0.5, 0.75))
### (d) Find outliers, if any. Do a boxplot to visualize the same.
boxplot(x = rote_scores)
################################################################################################
quantile(x = rote_scores, probs  = c(0,0.25, 0.5, 0.75))
hist(x = rote_scores)
#For simplicity
getwd()
data <- read.csv("housing_data.csv" , header = T)
#To clear the History
rm(list = ls())
philips = c(15 ,21 ,20, 20,20)
sd(philips)
sd(philips)
philips = c(30 , 25 ,12 ,35 ,0)
sd(philips)
rm(list = ls(all=TRUE))
factory_work <- matrix(data = c(15, 21, 20, 20, 20, 30, 25, 12, 35, 0),
nrow = 2, ncol = 5, byrow = TRUE)
rownames(factory_work) <- c('Philip','Mathew')
factory_work <- matrix(data = c(15, 21, 20, 20, 20, 30, 25, 12, 35, 0),
nrow = 2, ncol = 5, byrow = TRUE)
rownames(factory_work) <- c('Philip','Mathew')
colnames(factory_work) <- c('Mon','Tue','Wed','Thu','Fri')
factory_work
mean_philip <- mean(factory_work["Philip",])
mean_philip
mean_mathew <- mean(factory_work["Mathew",])
mean_mathew
median_philip <- median(factory_work["Philip",])
median_mathew <- median(factory_work["Mathew",])
median_mathew
range(factory_work["Philip",])
range_philip <- max(factory_work["Philip",]) - min(factory_work["Philip",])
range_philip
range_mathew <- max(factory_work["Mathew",]) - min(factory_work["Mathew",])
range_mathew
sd_philip <- sqrt(sum((factory_work["Philip",] - mean(factory_work["Philip",]))^2)/ncol(factory_work))
sd_philip
sd_mathew <- sqrt(sum((factory_work["Mathew",] - mean(factory_work["Mathew",]))^2)/ncol(factory_work))
sd_mathew
barplot(factory_work, ylim = c(0,40), beside = T, col = c("blue", "red"))
legend(x = "topright", legend = c("Philip","Mathew"), pch = 15, col = c("blue", "red"))
barplot(factory_work, ylim = c(0,40), beside = T, col = c("blue", "red"))
legend(x = "topright", legend = c("Philip","Mathew"), pch = 15, col = c("blue", "red"))
kohli_scores <- c(65, 72, 58, 77)
kohli_scores
old_median <- median(kohli_scores)
old_median
old_mean <- mean(kohli_scores)
old_mean
new_kohli_scores <- c(kohli_scores, 70)
new_kohli_scores
new_median <- median(new_kohli_scores)
new_median
new_mean <- mean(new_kohli_scores)
new_mean
new_median
new_mean
old_mean
given_data <- c(8, 6, 2, 4, 6, 8, 10, 8)
data_in_table <- table(given_data)
data_in_table
names(sort(data_in_table, decreasing = T))[1]
rote_scores <- c(11, 7.5, 8.5, 10, 10, 10.5, 5.5, 10, 9, 9.5, 5.25, 8, 6.5, 10.5, 8.75, 0, 6, 6, 6.75, 8.75, 0, 9.5, 7.5, 8.5, 7)
rote_mean <- mean(rote_scores)
rote_mean
diff_mean <- rote_scores - rote_mean
diff_mean
diff_mean_sq <- diff_mean^2
diff_mean_sq
diff_mean_sq_sum <- sum(diff_mean_sq)/length(rote_scores)
diff_mean_sq_sum
sd_rote <- sqrt(diff_mean_sq_sum)
sd_rote
range <- max(rote_scores) - min(rote_scores) #Range
range
sd_rote <- sqrt(sum((rote_scores - mean(x = rote_scores))^2)/length(x = rote_scores))
quantile(x = rote_scores)
quantile(x = rote_scores, prob = seq(from = 0, to = 1, by = 0.9),type = 1)
diff_mean_sq <- diff_mean^2
diff_mean_sq
diff_mean
diff_mean_sq_sum <- sum(diff_mean_sq)/length(rote_scores)
diff_mean_sq_sum
sd_rote <- sqrt(diff_mean_sq_sum)
sd_rote
range <- max(rote_scores) - min(rote_scores) #Range
range
sd_rote <- sqrt(sum((rote_scores - mean(x = rote_scores))^2)/length(x = rote_scores))
quantile(x = rote_scores)
quantile(x = rote_scores, prob = seq(from = 0, to = 1, by = 0.9),type = 1)
hist(x = rote_scores)
quantile(x = rote_scores, probs  = c(0,0.25, 0.5, 0.75))
boxplot(x = rote_scores)
sd_rote
diff_mean_sq_sum
sd_rote <- sqrt(sum((rote_scores - mean(x = rote_scores))^2)/length(x = rote_scores))
sd_rote
range
sd_rote <- sqrt(sum((rote_scores - mean(x = rote_scores))^2)/length(x = rote_scores))
quantile(x = rote_scores)
quantile(x = rote_scores, prob = seq(from = 0, to = 1, by = 0.9),type = 1)
hist(x = rote_scores)
quantile(x = rote_scores, probs  = c(0,0.25, 0.5, 0.75))
boxplot(x = rote_scores)
aa <- c(7,9,9,10,10,10,10,11,11,13)
bb <- c(7,8,9,9,10,10,11,11,12,13)
cc <- c(3,  3,  6,  7,  7,  10,  10,  10,  11,  13,  30 )
datalist<-list()
dataL <- list()
dataL[["player1"]] = aa
dataL[["player2"]] = bb
dataL[["player3"]] = cc
boxOut <- boxplot(dataL)
rm(list = ls())
library(C50)
setwd("D:/Utham/AppliedAICourse/habermans-survival-data-set")
rm(list = ls())
data <- read.csv("haberman_data.csv")
View(data)
View(data)
library(tidyverse)
View(data)
View(data)
data %>% ggplot(aes(x = YEAR , y = AGE)) + geom_point(size=2)
data %>% ggplot(aes(x = YEAR , y = AGE , colour = NODES)) + geom_point(size=2)
data %>% ggplot(aes(x = YEAR , y = NODES , colour = AGE )) + geom_point(size=2)
data %>% ggplot(aes(x = YEAR , y = SURVIVAL , colour = AGE )) + geom_point(size=2)
data %>% ggplot(aes(x = YEAR , y = NODES , colour = AGE )) + geom_point(size=2)
str(data)
